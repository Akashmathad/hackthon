// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(uuid())
  name              String?
  email             String?        @unique
  image       String?
  emailVerified DateTime?
  accounts    Account[]
  sessions    Session[]
  
}

model Cabins{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  name String
  maxCapacity String
  regularPrice String
  discount Int
  description String
  image String

  bookings Bookings[]
}

model Guests{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  fullName String
  email String @unique
  nationalID String?
  nationality String?
  countryFlag String?

  bookings Bookings[]
}

model Settings{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  minBookingLength Int
  maxBookingLength Int
  maxGuestsPerBooking Int
  breakfastPrice Float
}

model Bookings{
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  startDate DateTime
  endDate DateTime
  numNights Int
  numGuests Int
  cabinPrice Float
  extrasPrice Float
  totalPrice Float
  status String
  hasBreakfast Boolean
  isPaid Boolean
  observations String
  cabinId String
  guestId String

  cabins Cabins @relation(fields: [cabinId], references: [id])
  guests Guests @relation(fields: [guestId], references: [id])
}